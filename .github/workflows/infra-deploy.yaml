# .github/workflows/deploy-infra.yml

name: AWS Infrastructure Management (Using Access Keys)

on:
  push:
    branches:
      - master
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (apply or destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  contents: read

jobs:
  manage-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.0.0'

      # Step 3: Terraform Init
      - name: Terraform Init
        id: init
        run: terraform init -input=false -reconfigure -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=infra/terraform.tfstate" -backend-config="region=us-east-1"

      # Step 4: Terraform Plan
      - name: Terraform Plan
        id: plan # Add id for potential future use
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'destroy')
        run: terraform plan -out=tfplan -input=false
        env:
          # Pass non-credential TF variables needed ONLY by terraform config itself
          TF_VAR_admin_user_arns: ${{ secrets.ADMIN_USER_ARN }}
          TF_VAR_admin_k8s_username: ${{ secrets.ADMIN_K8S_USERNAME }}
          # TF_VAR_aws_region: us-east-1 # Not needed if set globally

      # Step 5: Terraform Apply
      - name: Terraform Apply
        id: apply # Add id for potential future use
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'destroy')
        run: terraform apply -auto-approve -input=false tfplan

      # Step 6: Terraform Destroy
      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        env:
          # Pass TF_VARs needed for destroy
          TF_VAR_admin_user_arns: ${{ secrets.ADMIN_USER_ARN }}
          TF_VAR_admin_k8s_username: ${{ secrets.ADMIN_K8S_USERNAME }}
          # TF_VAR_aws_region: us-east-1