# .github/workflows/deploy-helm.yml (or your chosen filename)

name: Deploy Helm Chart to EKS

on:
  # Trigger independently on pushes affecting app/ or helm/ directories
  push:
    branches:
      - master # Or your primary branch name
    paths:
      - 'app/**'
      - 'helm/**'

  # Allows manual triggering
  workflow_dispatch:

# Permissions: Only 'contents: read' is needed for checkout
permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Define AWS credentials and region as environment variables for the job
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1 # Specify the AWS region of your EKS cluster & ECR repo

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: REMOVED - Configure AWS credentials using OIDC is no longer needed

      # Step 3: Install Helm (if not already on runner image)
      # Often pre-installed on github runners, but good practice to ensure
      - name: Set up Helm
        uses: azure/setup-helm@v4 # Or another setup action if preferred
        # with:
        #   version: 'v3.x.x' # Specify version if needed

      # Step 4: Update kubeconfig for EKS
      # Uses the job's environment variables for AWS authentication
      - name: Update kubeconfig for EKS
        run: |
          echo "Configuring kubectl for cluster: cc-eks"
          aws eks update-kubeconfig --name cc-eks --region $AWS_REGION

      # Step 5: Deploy Helm Chart
      - name: Deploy Helm Chart
        env:
          # Make secrets available to construct the image path
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # Construct the full ECR image path
          # Format: <ACCOUNT_ID>.dkr.ecr.<REGION>.amazonaws.com/<REPO_NAME>
          FULL_ECR_IMAGE_PATH="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"

          echo "Deploying Helm chart 'demo-service' from './helm/demo-service'"
          echo "Target namespace: demo-service"
          echo "Setting image repository to: ${FULL_ECR_IMAGE_PATH}"
          echo "Setting image tag to: latest"

          # Run helm upgrade --install
          # Creates the namespace if it doesn't exist
          # Sets the image repository and tag dynamically
          helm upgrade --install demo-service helm/demo-service \
            --namespace demo-service \
            --create-namespace \
            --set deployment.image.repository="${FULL_ECR_IMAGE_PATH}" \
            --set deployment.image.tag="latest" # Deploy the 'latest' tag built previously

          echo "Helm deployment command executed."