# .github/workflows/deploy-helm.yml

name: Deploy/Delete Helm Chart to EKS

on:
  # Trigger on pushes affecting app code or Helm chart (always performs deploy)
  push:
    branches:
      - master # Or your primary branch name
    paths:
      - 'app/**'
      - 'helm/**'

  # Allows manual triggering with action choice
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy or delete)'
        required: true
        default: 'deploy' # Default action is deploy
        type: choice
        options:
          - deploy # Corresponds to helm upgrade --install
          - delete # Corresponds to helm uninstall

# Permissions: Only need 'contents: read' for checkout
permissions:
  contents: read

jobs:
  manage-helm-release: # Changed job name for clarity
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TARGET_NAMESPACE: demo-service # Define the target Kubernetes namespace
      HELM_RELEASE_NAME: demo-service # Name of the Helm release
      HELM_CHART_PATH: helm/demo-service # Path to the Helm chart within the repo
      CLUSTER_NAME: cc-eks # EKS Cluster Name
      AWS_REGION: us-east-1 # AWS Region

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Helm client
      - name: Set up Helm
        uses: azure/setup-helm@v4
        # Optionally specify a Helm version
        # with:
        #   version: 'v3.x.x'

      # Step 3: Update kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: |
          echo "Configuring kubectl for cluster: ${{ env.CLUSTER_NAME }} in ${{ env.AWS_REGION }}"
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      # Step 4: Ensure Namespace Exists (Only for Deploy action)
      # Creates the namespace idempotently before Helm tries to use it.
      - name: Ensure Namespace Exists
        # Run on push OR on dispatch if action is deploy
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
        run: |
          echo "Ensuring namespace '${{ env.TARGET_NAMESPACE }}' exists..."
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${{ env.TARGET_NAMESPACE }}
          EOF
          echo "Namespace check/creation complete."

      # Step 5: Deploy/Upgrade Helm Chart (Only for Deploy action)
      - name: Deploy/Upgrade Helm Chart
        # Run on push OR on dispatch if action is deploy
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
        env:
          # Make AWS account ID and ECR repo name available for image path construction
          # Ensure these secrets exist in your GitHub repository
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }} # e.g., demo-service
          IMAGE_TAG: latest # Or use github.sha for commit-specific tags
        run: |
          # Construct the full ECR image path
          FULL_ECR_IMAGE_PATH="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${ECR_REPOSITORY_NAME}"

          echo "Deploying/Upgrading Helm release '${{ env.HELM_RELEASE_NAME }}' from chart '${{ env.HELM_CHART_PATH }}'"
          echo "Target namespace: ${{ env.TARGET_NAMESPACE }}"
          echo "Setting image repository to: ${FULL_ECR_IMAGE_PATH}"
          echo "Setting image tag to: ${IMAGE_TAG}"

          # Use helm upgrade --install for idempotency
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.TARGET_NAMESPACE }} \
            --set deployment.image.repository="${FULL_ECR_IMAGE_PATH}" \
            --set deployment.image.tag="${IMAGE_TAG}" \
            --wait # Optional: Wait for resources to become ready

          echo "Helm deployment/upgrade command executed."

      # Step 6: Uninstall Helm Release (Only for Delete action)
      - name: Uninstall Helm Release
        # Run ONLY on dispatch if action is delete
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'delete'
        run: |
          echo "Uninstalling Helm release '${{ env.HELM_RELEASE_NAME }}' from namespace '${{ env.TARGET_NAMESPACE }}'..."
          # Add --ignore-not-found to avoid errors if the release is already gone
          helm uninstall ${{ env.HELM_RELEASE_NAME }} --namespace ${{ env.TARGET_NAMESPACE }} --ignore-not-found
          echo "Helm uninstall command executed."
          # Optionally, you could delete the namespace here too, but be cautious
          # echo "Deleting namespace '${{ env.TARGET_NAMESPACE }}'..."
          # kubectl delete namespace ${{ env.TARGET_NAMESPACE }} --ignore-not-found