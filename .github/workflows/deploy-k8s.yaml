# .github/workflows/deploy-helm.yml

name: Deploy Helm Chart to EKS (Using Access Keys)

on:
  push:
    branches:
      - master
    paths:
      - 'app/**'
      - 'helm/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      TARGET_NAMESPACE: demo-service # Define namespace as variable

    steps:
      # Step 1: Check out code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v4

      # Step 3: Update kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: |
          echo "Configuring kubectl for cluster: cc-eks"
          aws eks update-kubeconfig --name cc-eks --region $AWS_REGION

      # --- NEW STEP ---
      # Step 4: Ensure Namespace Exists using kubectl apply
      - name: Ensure Namespace Exists
        run: |
          echo "Ensuring namespace '${{ env.TARGET_NAMESPACE }}' exists..."
          # Use kubectl apply with a simple Namespace manifest via heredoc
          # Apply is idempotent and won't fail if the namespace already exists
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${{ env.TARGET_NAMESPACE }}
          EOF
          echo "Namespace existence check complete."

      # Step 5: Deploy Helm Chart (Removed --create-namespace)
      - name: Deploy Helm Chart
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # Construct the full ECR image path
          FULL_ECR_IMAGE_PATH="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"

          echo "Deploying Helm chart 'demo-service' from './helm/demo-service'"
          echo "Target namespace: ${{ env.TARGET_NAMESPACE }}"
          echo "Setting image repository to: ${FULL_ECR_IMAGE_PATH}"
          echo "Setting image tag to: latest"

          # Run helm upgrade --install WITHOUT --create-namespace
          helm upgrade --install demo-service helm/demo-service \
            --namespace ${{ env.TARGET_NAMESPACE }} \
            --set deployment.image.repository="${FULL_ECR_IMAGE_PATH}" \
            --set deployment.image.tag="latest"

          echo "Helm deployment command executed."